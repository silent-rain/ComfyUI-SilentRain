# rust-toolchain ci github
# 当前不支持 intel-mkl-src 编译
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*" # 当推送v开头的标签时触发
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

# env:
#   PACKAGE_NAME: comfyui_silentrain # 全局环境变量，所有 job/step 都可以用

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: i686-unknown-linux-gnu
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable

      - name: Install libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y libssl-dev libssl-dev:i386 \
            gcc-multilib g++-multilib \
            python3-dev protobuf-compiler

      - name: Install Rust target
        run: |
          rustup target add ${{ matrix.platform.target }}
      - name: Install maturin
        run: pipx install maturin==1.9.0
      - name: Install sccache
        run: |
          cargo install sccache
          export RUSTC_WRAPPER=sccache

      - name: Build wheels
        run: maturin build --release --target ${{ matrix.platform.target }} --out dist -i python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
          - runner: windows-latest
            target: i686-pc-windows-gnu
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable

      - name: Install libraries
        run: |
          choco install openssl.light
          choco install protoc

      - name: Install Intel MKL (Windows)
        if: matrix.platform.target == 'i686-pc-windows-gnu' || matrix.platform.target == 'x86_64-pc-windows-gnu'
        run: |
          choco install intel-oneapi-mkl-devel -y
          echo "MKLROOT=C:\Program Files (x86)\Intel\oneAPI\mkl\latest" >> $env:GITHUB_ENV
          echo "LIB=$env:MKLROOT\lib\intel64;$env:LIB" >> $env:GITHUB_ENV

      - name: Install Rust target
        run: |
          rustup target add ${{ matrix.platform.target }}
      - name: Install maturin
        run: pipx install maturin==1.9.0
      - name: Install sccache
        run: |
          cargo install sccache
          $env:RUSTC_WRAPPER = "sccache"

      - name: Build wheels
        run: maturin build --release --target ${{ matrix.platform.target }} --out dist -i python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64-apple-darwin
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable

      - name: Install libraries
        run: brew install openssl protobuf python@3

      - name: Install Rust target
        run: |
          rustup target add ${{ matrix.platform.target }}
      - name: Install maturin
        run: pipx install maturin==1.9.0
      - name: Install sccache
        run: |
          cargo install sccache
          export RUSTC_WRAPPER=sccache

      - name: Build wheels
        run: maturin build --release --target ${{ matrix.platform.target }} --out dist -i python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    # needs: [linux, windows, macos]
    needs: [linux]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - uses: softprops/action-gh-release@v1
        with:
          files: wheels-*/*
