# This file is autogenerated by maturin v1.8.3
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*" # 当推送v开头的标签时触发
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

# env:
#   PACKAGE_NAME: comfyui_silentrain # 全局环境变量，所有 job/step 都可以用

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 从 Cargo.toml 提取包名和版本号
      - name: Extract package info
        id: package-info # 必须定义id
        run: |
          NAME=$(grep -A1 '^\[package\]' Cargo.toml | grep '^name =' | cut -d '"' -f2 | tr '-' '_' | tr -d '\n')  # 替换下划线
          VERSION=$(grep '^version =' Cargo.toml | cut -d '"' -f2  | tr -d '\n')
          echo "${NAME} ${VERSION}"
          echo "PACKAGE_NAME=${NAME}s" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV

      # - name: Get version from tag
      #   run: |
      #     VERSION=$(git describe --tags --abbrev=0)
      #     echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install libraries
        run: sudo apt-get update && sudo apt-get install -y libssl-dev python3-dev protobuf-compiler

      - name: Ensure protoc is in Docker
        run: |
          which protoc
          protoc --version
          export PROTOC=$(which protoc)
          echo "PROTOC=$PROTOC" >> $GITHUB_ENV

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PROTOC: ${{ env.PROTOC }} # 传递环境变量
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          container: off # Set to off to disable manylinux docker build and build on the host instead.

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}-${{ github.job }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          # - runner: windows-latest
          #   target: x86
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.target }}

      - name: Extract package info (Windows)
        shell: pwsh
        run: |
          $name = ((Select-String '^\[package\]' -Path Cargo.toml -Context 0,1 | Select-Object -ExpandProperty Context).PostContext | Select-String '^name =').Line -replace 'name = "', '' -replace '"', '' -replace '-', '_'
          $version = (Select-String '^version =' -Path Cargo.toml).Line -replace 'version = "', '' -replace '"', ''
          echo "$name $version"
          echo "PACKAGE_NAME=$name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # - name: Install protoc
      #   shell: pwsh
      #   run: |
      #     $version = "25.3"
      #     Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v$version/protoc-$version-win64.zip" -OutFile "protoc.zip"
      #     Expand-Archive protoc.zip -DestinationPath "$env:RUNNER_TEMP\protoc"
      #     $env:PATH += ";$env:RUNNER_TEMP\protoc\bin"
      #     echo "$env:RUNNER_TEMP\protoc\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Install Protocol Buffers (protoc)
        run: |
          choco install openssl.light
          choco install protoc

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}-${{ github.job }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 从 Cargo.toml 提取包名和版本号
      - name: Extract package info
        id: package-info # 必须定义id
        run: |
          NAME=$(grep -A1 '^\[package\]' Cargo.toml | grep '^name =' | cut -d '"' -f2 | tr '-' '_' | tr -d '\n')  # 替换下划线
          VERSION=$(grep '^version =' Cargo.toml | cut -d '"' -f2  | tr -d '\n')
          echo "${NAME} ${VERSION}"
          echo "PACKAGE_NAME=${NAME}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Install Protocol Buffers (protoc)
        run: brew install openssl protobuf python@3

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-${{ matrix.python-version }}-${{ github.run_id }}-${{ github.job }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    # needs: [linux, windows, macos]
    needs: [linux]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - uses: softprops/action-gh-release@v1
        with:
          files: wheels-*/*
